Design patterns:
	Provide a resuable solution for common problems

	1) Creational pattern - mainly talk about use interface/inheritance in class instead of concrete and object creation
		* Singleton pattern - class must have one instance
		* Factory method pattern - create instance for several derived class
		* Abstract Factory method pattern - create instance for several family class
		* Builder - seperate object creation from its representation
	2) Structural pattern - relationship of the object
		* Adapter pattern - provide interface for different classes
		* Composite pattern - simple and composite object
		* Facede pattern - single class responsible for enitre subsystem
		* Decorate pattern - add responsible to the object dynamically 
	3) Behavioral pattern - interaction/communication between the object
		* Observer pattern - when one object change it state all it dependency needs to be update automatically
		* Command pattern - command request as an object
		* State pattern - alter object behaviour when the state changes
		* Strategy pattern - implements algorithm in the class

-> has-a (compensation)
-|> is - a (inheritance)
--> dependency class lion is a inheritance of class animal, inside the lion we have type Cat , the Cat is also a class , so like
class lion implements animal {
	public String getCatType(Cat cat){
		return cat;
	}
}
here the cat is dependency

no 23 from gang of four only 6 to master it:

creational : Factory
structural : Adapter, Decorator
behavioral : Facade, Observor, Strategy

Strategy:
[Check the code]
* The strategy pattern lets you switch between different methods for doing a task without changing the object using them. in code when the state of duck fly method changes means it change the object of the paticluar behaviour alters.

* when the state changes it alters the object behavior.

* Duck has a flyBehaviour and quackBehaviour 
* MallardDuck is a inheritance of the Duck


Adapter:
[Check the code]
Eg: european mobiler charger does not fit in american switch box, for that you need mobile charging adapter, european charger -> adapter -> american switch box

* Your system/main class need to fit with the vendor class you need an adapter class
* This pattern converts the interface of a class into another interface that client class expects.


Observer: 
[Check the code]
* when one object change its state all its dependency needs to update automatically
* one to many relationship , subject -> observer1,observer2,observer3 waiting for the state change

Decorate:
[check the code]
* add responsible to the object dynamically 

Facade:
[Check the code]
* Single class responsible for entire subsystem

Factory:
[Check the code]
* class must have one instance
* Duck duck;
	if(picnic){
		duck = new MallardDuck();
	}else if(hunting){
		duck = new RedHeadDuck();
	}

* above code - runtime decision making

another example:
	* I have one product store which create Tshirt and Pant
	  	* common thing selling the product, put that in interface
	* I have another product store which create Shoes
		* common thing selling the product, put that in interface
	* Now India have different way of creating the Tshirt and Pant, where in America have different way of creating it

	problem:
		create India instance and create Product A and Product B and pass it to India, but the factory pattern says need to use one instance in a class

	Solution:
		create product A and Product B as it is
		create common interface called Factory then inside that createProduct method
		create India, America class implements Factory

		Then use Factory to create india and america instances with that instances create products

